-- CONHECENDO AS TABELAS
SELECT * FROM TABELA_DE_CLIENTES;
SELECT * FROM TABELA_DE_PRODUTOS;
SELECT * FROM TABELA_DE_VENDEDORES;
SELECT * FROM ITENS_NOTAS_FISCAIS;
SELECT * FROM NOTAS_FISCAIS;

-- INCLUINDO UM NOVO CADASTRO DE CLIENTES
insert into TABELA_DE_CLIENTES
	(CPF, NOME, ENDERECO_1, ENDERECO_2, BAIRRO, CIDADE, ESTADO, CEP, DATA_DE_NASCIMENTO, IDADE, GENERO, LIMITE_DE_CREDITO, VOLUME_DE_COMPRA, PRIMEIRA_COMPRA)
VALUES
	('23412632331', 'Juliana Silva', 'Rua Tramandaí', ' ', 'Bangu', 'Rio de
Janeiro', 'RJ', '23400000', '1989-02-04', 33, 'F', '180000', '24500', 0);

--VERIFICANDO QUANTOS CLIENTES TEM EM CADA CIDADE
SELECT
	CIDADE, COUNT(*) AS 'NUMERO DE CLIENTES'
FROM TABELA_DE_CLIENTES
GROUP BY CIDADE

-- VERIFICANDO A MÉDIA DE IDADE E DE CRÉDITO POR CIDADE
SELECT * FROM TABELA_DE_CLIENTES
SELECT 
	CIDADE, AVG(IDADE) AS IDADE, avg(LIMITE_DE_CREDITO) AS CREDITO
FROM TABELA_DE_CLIENTES
group by CIDADE

-- VERIFICANDO A MÉDIA DE LIMITE DE CRÉDITO POR GENERO
SELECT * FROM TABELA_DE_CLIENTES
SELECT 
	GENERO, ROUND(avg(LIMITE_DE_CREDITO),2) AS CREDITO
FROM TABELA_DE_CLIENTES
group by GENERO

-- VERIFICANDO A MÉDIA DE LIMITE DE CRÉDITO POR CIDADE E GENERO
SELECT * FROM TABELA_DE_CLIENTES
SELECT 
	CIDADE, GENERO, ROUND(avg(LIMITE_DE_CREDITO),2) AS CREDITO
FROM TABELA_DE_CLIENTES
group by GENERO, CIDADE

-- TOP 5 CLIENTES COM MAIOR LIMITE DE CRÉDITO E VOLUME DE COMPRA
SELECT TOP 5
	NOME, CIDADE, IDADE, LIMITE_DE_CREDITO, VOLUME_DE_COMPRA
FROM TABELA_DE_CLIENTES
ORDER BY LIMITE_DE_CREDITO DESC

--SEGMENTANDO CLIENTES POR LIMITE DE CRÉDITO
SELECT
	NOME,
	IDADE,
	LIMITE_DE_CREDITO,
	(CASE
		WHEN LIMITE_DE_CREDITO >= 150000 THEN 'CLIENTE GRANDE'
		WHEN LIMITE_DE_CREDITO >= 110000 THEN 'CLIENTE MÉDIO'
		ELSE 'CLIENTE PEQUENO'
		END) AS PORTE_CLIENTE
FROM TABELA_DE_CLIENTES
ORDER BY LIMITE_DE_CREDITO DESC

-- VERIFICANDO OS CLIENTES QUE NÃO REALIZARAM NENHUMA COMPRA
SELECT DISTINCT
	TC.CPF AS 'CPF DO CADASTRO', TC.NOME AS 'NOME DO CLIENTE', NF.CPF AS 'CPF NOTA'
from TABELA_DE_CLIENTES TC
LEFT JOIN
NOTAS_FISCAIS NF
ON TC.CPF = NF.CPF
WHERE NF.CPF IS NULL

/*RELACIONANDO OS BAIRROS DOS VENDEDORES COM OS BAIRROS DOS CLIENTES PARA ENTENDER: 1 - QUAIS CLIENTES ESTÃO SEM VENDEDORES EM SEUS BAIRROS.
2 - QUAIS VENDEDORES ESTÃO SEM CLIENTES EM SEUS BAIRROS*/

SELECT COUNT(*) FROM TABELA_DE_CLIENTES -- 16 CLIENTES NO TOTAL
SELECT COUNT(*) FROM TABELA_DE_VENDEDORES -- 4 VENDEDORES NO TOTAL

SELECT DISTINCT
	TV.NOME AS 'NOME DO VENDEDOR', TC.NOME AS 'NOME DO CLIENTE', TV.BAIRRO AS 'BAIRRO DO VENDEDOR', TC.BAIRRO AS 'BAIRRO DO CLIENTE'
FROM TABELA_DE_CLIENTES TC
FULL JOIN
TABELA_DE_VENDEDORES TV
ON TC.BAIRRO = TV.BAIRRO
-- SOMENTE 7 CLIENTES POSSUEM VENDEDORES NOS SEUS BAIRROS
-- SOMENTE 3 VENDEDORES POSSUEM CLIENTES EM SEUS BAIRROS
-- A VENDEDORA ROBERTA MARTINS EM COPACABANA NÃO TEM CLIENTES NO BAIRRO
/* ESSES CLIENTES NÃO TEM VENDEDOR EM SEUS BAIRROS: Abel Silva, Edson Meilelles, Fabio Carvalho, Fernando Cavalcante, Juliana Silva, Marcelo Mattos, Marcos Nogueira, Petra Oliveira, Walber Lontra*/

-- COMPARANDO OS BAIRROS DOS CLIENTES E FORNECEDORES COM A FUNÇÃO UNION
SELECT
	DISTINCT BAIRRO
FROM TABELA_DE_CLIENTES -- 12 BAIRROS DOS CLIENTES
SELECT
	DISTINCT BAIRRO
FROM TABELA_DE_VENDEDORES -- 4 BAIRROS DOS VENDEDORES
SELECT
	DISTINCT BAIRRO, 'CLIENTE' AS ORIGEM
FROM TABELA_DE_CLIENTES
UNION ALL
SELECT
	DISTINCT BAIRRO, 'FORNECEDOR' AS ORIGEM
FROM TABELA_DE_VENDEDORES

-- VERIFICANDO QUAIS CLIENTES  ESTÃO LOCALIZADOS NOS BAIRROS ONDE HÁ VENDEDORES ATRAVÉS DE SUBQUERIES
SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES;

SELECT * FROM TABELA_DE_CLIENTES
WHERE BAIRRO IN (SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES);

-- VERIFICANDO A QUANTIDADE DE VENDAS POR CLIENTES PARA CADA MÊS E ANO
SELECT * FROM NOTAS_FISCAIS;
SELECT * FROM ITENS_NOTAS_FISCAIS
SELECT
	NF.CPF,
	CONVERT(VARCHAR(7), NF.DATA_VENDA,120) AS MES_ANO,
	SUM(INF.QUANTIDADE) AS QUANTIDADE_TOTAL
FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
	ON NF.NUMERO = INF.NUMERO
GROUP BY 
	NF.CPF,
	CONVERT(VARCHAR(7), NF.DATA_VENDA,120)

-- COMPARANDO A QUANTIDADE COMPRADA DE CADA CLIENTE POR MÊS EM RELAÇÃO AO VOLUME DE COMPRA PERMITIDO
SELECT CPF, NOME, VOLUME_DE_COMPRA FROM TABELA_DE_CLIENTES;
SELECT
	TC.CPF, TC.NOME, TC.VOLUME_DE_COMPRA, TV.MES_ANO, TV.QUANTIDADE_TOTAL
FROM TABELA_DE_CLIENTES TC
INNER JOIN
	(SELECT
	NF.CPF,
	CONVERT(VARCHAR(7), NF.DATA_VENDA,120) AS MES_ANO,
	SUM(INF.QUANTIDADE) AS QUANTIDADE_TOTAL
FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
	ON NF.NUMERO = INF.NUMERO
GROUP BY 
	NF.CPF,
	CONVERT(VARCHAR(7), NF.DATA_VENDA,120)) TV
	ON
	TV.CPF = TC.CPF

--CLASSIFICANDO OS CPFS COM OS VOLUMES ESTÃO ACIMA DO PERMITIDO
SELECT
	TC.CPF,	TC.NOME, TC.VOLUME_DE_COMPRA, TV.MES_ANO, TV.QUANTIDADE_TOTAL,
(CASE WHEN TC.VOLUME_DE_COMPRA >= TV.QUANTIDADE_TOTAL THEN 'VENDAS VÁLIDAS'
ELSE 'VENDAS INVÁLIDAS' END) AS RESULTADO
FROM TABELA_DE_CLIENTES TC
INNER JOIN
	(SELECT
	NF.CPF,
	CONVERT(VARCHAR(7), NF.DATA_VENDA,120) AS MES_ANO,
	SUM(INF.QUANTIDADE) AS QUANTIDADE_TOTAL
FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
	ON NF.NUMERO = INF.NUMERO
GROUP BY 
	NF.CPF,
	CONVERT(VARCHAR(7), NF.DATA_VENDA,120)) TV
	ON
	TV.CPF = TC.CPF
WHERE (CASE WHEN TC.VOLUME_DE_COMPRA >= TV.QUANTIDADE_TOTAL THEN 'VENDAS VÁLIDAS'
ELSE 'VENDAS INVÁLIDAS' END) = 'VENDAS INVÁLIDAS'

--CALCULANDO A DIFERENÇA ENTRE VOLUME DE COMPRA PERMITIDO E A QUANTIDADE TOTAL
SELECT
	TC.CPF,	TC.NOME, TC.VOLUME_DE_COMPRA, TV.MES_ANO, TV.QUANTIDADE_TOTAL,ROUND((1 - (TC.VOLUME_DE_COMPRA/TV.QUANTIDADE_TOTAL)) * 100,2) AS PERCENTUAL_EXCEDIDO,	
(CASE WHEN TC.VOLUME_DE_COMPRA >= TV.QUANTIDADE_TOTAL THEN 'VENDAS VÁLIDAS'
ELSE 'VENDAS INVÁLIDAS' END) AS RESULTADO
FROM TABELA_DE_CLIENTES TC
INNER JOIN
	(SELECT
	NF.CPF,
	CONVERT(VARCHAR(7), NF.DATA_VENDA,120) AS MES_ANO,
	SUM(INF.QUANTIDADE) AS QUANTIDADE_TOTAL
FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
	ON NF.NUMERO = INF.NUMERO
GROUP BY 
	NF.CPF,
	CONVERT(VARCHAR(7), NF.DATA_VENDA,120)) TV
	ON
	TV.CPF = TC.CPF
WHERE (CASE WHEN TC.VOLUME_DE_COMPRA >= TV.QUANTIDADE_TOTAL THEN 'VENDAS VÁLIDAS'
ELSE 'VENDAS INVÁLIDAS' END) = 'VENDAS INVÁLIDAS'

-- VERIFICANDO QUANTAS VENDAS CADA VENDEDOR TEVE (QUANTAS NOTAS FICAIS CADA UM GEROU)
SELECT * FROM TABELA_DE_VENDEDORES
SELECT * FROM NOTAS_FISCAIS
SELECT
	NF.MATRICULA AS MATRICULA, TV.NOME AS 'NOME DO VENDEDOR', COUNT (*) AS NUMERO_VENDAS
FROM TABELA_DE_VENDEDORES TV
INNER JOIN NOTAS_FISCAIS NF
	ON NF.MATRICULA = TV.MATRICULA
GROUP BY NF.MATRICULA, TV.NOME;

-- SEGMENTANDO PRODUTOS PELO PREÇO
SELECT * FROM TABELA_DE_PRODUTOS
SELECT
	NOME_DO_PRODUTO, ROUND(PRECO_DE_LISTA,2) AS PRECO,
(CASE
	WHEN PRECO_DE_LISTA >= 12 THEN 'VALOR ALTO'
	WHEN PRECO_DE_LISTA >= 7 THEN 'VALOR MÉDIO'
	ELSE 'VALOR BAIXO'
	END) AS CLASSIFICACAO
FROM TABELA_DE_PRODUTOS
ORDER BY PRECO_DE_LISTA

-- AGRUPANDO SEGMENTAÇÃO DE PRODUTOS
SELECT
	(CASE
	WHEN PRECO_DE_LISTA >= 12 THEN 'VALOR ALTO'
	WHEN PRECO_DE_LISTA >= 7 THEN 'VALOR MÉDIO'
	ELSE 'VALOR BAIXO'
	END) AS CLASSIFICACAO, COUNT(*) AS 'QUANTIDADE DE PRODUTOS'
FROM TABELA_DE_PRODUTOS
GROUP BY (CASE
	WHEN PRECO_DE_LISTA >= 12 THEN 'VALOR ALTO'
	WHEN PRECO_DE_LISTA >= 7 THEN 'VALOR MÉDIO'
	ELSE 'VALOR BAIXO'
	END);

-- VERIFICANDO AS VENDAS ANUAIS POR  CADA SABOR
SELECT
	TP.SABOR,
	YEAR(NF.DATA_VENDA) AS ANO,
	SUM(INF.QUANTIDADE) AS VENDA_ANO
FROM TABELA_DE_PRODUTOS TP
INNER JOIN ITENS_NOTAS_FISCAIS INF
	ON TP.CODIGO_DO_PRODUTO = INF.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
	ON INF.NUMERO = NF.NUMERO
GROUP BY TP.SABOR, YEAR(NF.DATA_VENDA)

--VERIFICANDO AS VENDAS TOTAIS DE CADA ANO
SELECT
	YEAR(NF.DATA_VENDA) AS ANO,
	SUM(INF.QUANTIDADE) AS VENDA_TOTAL_ANO
FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
	ON NF.NUMERO = INF.NUMERO
GROUP BY YEAR(NF.DATA_VENDA);

-- VERIFICANDO AS VENDAS TOTAIS DE CADA ANO EM RELAÇÃO A CADA SABOR(OTIMIZANDO ATRAVÉS DE WITH)
WITH VENDAS_POR_ANO AS(
SELECT
	TP.SABOR, YEAR(NF.DATA_VENDA) AS ANO, SUM(INF.QUANTIDADE) AS VENDA_ANO
FROM TABELA_DE_PRODUTOS TP
INNER JOIN ITENS_NOTAS_FISCAIS INF
	ON TP.CODIGO_DO_PRODUTO = INF.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
	ON INF.NUMERO = NF.NUMERO
GROUP BY TP.SABOR, YEAR(NF.DATA_VENDA)),
PERCENTUAL_ANO AS(
SELECT
	YEAR(NF.DATA_VENDA) AS ANO,	SUM(INF.QUANTIDADE) AS VENDA_TOTAL_ANO
FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
	ON NF.NUMERO = INF.NUMERO
GROUP BY YEAR(NF.DATA_VENDA))
SELECT
	SABOR, VA.ANO, VA.VENDA_ANO, PA.ANO, PA.VENDA_TOTAL_ANO,
	ROUND(((CONVERT(FLOAT, VA.VENDA_ANO)/CONVERT(FLOAT, PA.VENDA_TOTAL_ANO)) * 100),3) AS PERCENTUAL
FROM VENDAS_POR_ANO VA
INNER JOIN PERCENTUAL_ANO PA
	ON VA.ANO = PA.ANO
ORDER BY VA.ANO, ROUND(((CONVERT(FLOAT, VA.VENDA_ANO)/CONVERT(FLOAT, PA.VENDA_TOTAL_ANO)) * 100),2) DESC